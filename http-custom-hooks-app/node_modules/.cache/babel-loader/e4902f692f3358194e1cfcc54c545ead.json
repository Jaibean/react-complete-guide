{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.bod ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/jaimiebertoli/Documents/GitHub/react-complete-guide/http-custom-hooks-app/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","url","method","headers","body","bod","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAqC,OAArC;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMS,WAAW,GAAGR,WAAW,CAAC,YAAY;AAC1CK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1BR,aAAa,CAACS,GADY,EACP;AACfC,QAAAA,MAAM,EAAEV,aAAa,CAACU,MAAd,GAAuBV,aAAa,CAACU,MAArC,GAA8C,KADvC;AAEfC,QAAAA,OAAO,EAAEX,aAAa,CAACW,OAAd,GAAwBX,aAAa,CAACW,OAAtC,GAAgD,EAF1C;AAGfC,QAAAA,IAAI,EAAEZ,aAAa,CAACa,GAAd,GAAoBC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACY,IAA7B,CAApB,GAAyD;AAHhD,OADO,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACS,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;AACAlB,MAAAA,SAAS,CAACiB,IAAD,CAAT;AAED,KAhBD,CAgBE,OAAOE,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvB8B,EAuB5B,CAACH,aAAD,EAAgBC,SAAhB,CAvB4B,CAA/B;AAyBA,SAAO;AACHC,IAAAA,SAAS,EAAEA,SADR;AAEHE,IAAAA,KAAK,EAAEA,KAFJ;AAGHE,IAAAA,WAAW,EAAEA;AAHV,GAAP;AAKD,CAlCD;;GAAMP,O;;AAoCN,eAAeA,OAAf","sourcesContent":["import { useState, useCallback} from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        requestConfig.url, {\n            method: requestConfig.method ? requestConfig.method : 'GET',\n            headers: requestConfig.headers ? requestConfig.headers : {},\n            body: requestConfig.bod ? JSON.stringify(requestConfig.body) : null,\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n      \n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n\n  return {\n      isLoading: isLoading,\n      error: error,\n      sendRequest: sendRequest\n  };\n};\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}